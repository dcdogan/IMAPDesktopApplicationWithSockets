
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.net.ssl.SSLSocket;
import javax.net.ssl.SSLSocketFactory;
import javax.swing.JComboBox;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author DoganCan
 */
public class LoginScreen extends javax.swing.JFrame {

    /**
     * Creates new form LoginScreen
     */
    
    
    
    private String myRecords = "/Users/DoganCan/Desktop/IMAPDesktopApplicationWithSockets/src/UserRecords.txt";

     LinkedList<String> user_name;
    
     LinkedList<String> user_pass;
    
     LinkedList<String> host_name;

     LinkedList<String> ports;

    
    private void getUsername(){
        
        try {
            FileReader fileReader = new FileReader(this.myRecords);

            BufferedReader bufferedReader = new BufferedReader(fileReader);
            
            // Initialize linked list arrays
            user_name = new LinkedList<String>();
            user_pass = new LinkedList<String>();
            host_name = new LinkedList<String>();
            ports = new LinkedList<String>();

            String text_line = "";
            
            while((text_line = bufferedReader.readLine()) != null) {
                
             
                if(text_line != "\n"){
                System.out.println(text_line);
                
                String [] split = text_line.split("/");
          
                ports.add(split[1]);
                user_name.add(split[2]);
                user_pass.add(split[3]);
                host_name.add(split[0]);
                }
                
            }	

            // Always close files.
            bufferedReader.close();			
        }
        catch(FileNotFoundException ex) {
            System.out.println(
                "Unable to open file '" + 
                myRecords + "'");				
        }
        catch(IOException ex) {
            System.out.println(
                "Error reading file '" 
                + myRecords + "'");					
            // Or we could just do this: 
            // ex.printStackTrace();
        }
      
        
        for (int j = 0; j < user_name.size(); j++) {
            
            usersList.addItem(user_name.get(j));
            
        }
                
        
    }
    
    
    
    
    public LoginScreen() {
        initComponents();
     
        this.getUsername();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        user = new javax.swing.JLabel();
        pass = new javax.swing.JLabel();
        getUsername = new javax.swing.JTextField();
        getPassword = new javax.swing.JPasswordField();
        signin = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        hname = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        port = new javax.swing.JTextField();
        usersList = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        user.setText("Username:");

        pass.setText("Password:");

        getUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getUsernameActionPerformed(evt);
            }
        });

        signin.setText("Login");
        signin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signinActionPerformed(evt);
            }
        });

        jLabel1.setText("Host Name:");

        jLabel2.setText("Port:");

        usersList.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Users" }));
        usersList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usersListActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(33, 33, 33)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel1)
                    .add(pass)
                    .add(user, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 131, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel2))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                        .add(getUsername)
                        .add(getPassword, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 239, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(signin, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 88, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(hname, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 239, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(port, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 76, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(86, 86, 86)
                .add(usersList, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 194, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(63, 63, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap(9, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(usersList, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(102, 102, 102))
                    .add(layout.createSequentialGroup()
                        .add(23, 23, 23)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(hname, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel1))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(port, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel2))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(getUsername, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(user, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 27, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(getPassword, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(pass))
                        .add(18, 18, 18)
                        .add(signin)
                        .add(68, 68, 68))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void getUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getUsernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_getUsernameActionPerformed
    
    private void signinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signinActionPerformed
        
        try {  
            
            boolean contains = false;
            
            SSLSocketFactory sslsocketfactory = (SSLSocketFactory) SSLSocketFactory.getDefault();
            SSLSocket sslsocket = (SSLSocket) sslsocketfactory.createSocket(hname.getText(), Integer.parseInt(port.getText()));
            
            if (sslsocket.isConnected()) {
                System.out.println("Baglanti kuruldu");
            }
            else{
                System.out.println("Baglanti kurulamadi");
            }
            
            InputStream inputstream = sslsocket.getInputStream();
            InputStreamReader inputstreamreader = new InputStreamReader(inputstream);
            BufferedReader bufferedreader = new BufferedReader(inputstreamreader);

            OutputStream outputstream = sslsocket.getOutputStream();
            OutputStreamWriter outputstreamwriter = new OutputStreamWriter(outputstream);
            BufferedWriter bufferedwriter = new BufferedWriter(outputstreamwriter);

            
            String un = getUsername.getText();
            String pass = getPassword.getText();
            String line = new String();

            boolean valid = true;
            
            bufferedwriter.write(". login "+un + " " + pass + "\r\n" );
            
            bufferedwriter.flush();
            
            while(!(line = bufferedreader.readLine()).contains("(Success)")){
                
                if(line.contains("(Failure)")){
                    System.out.println("Username or password error");
                    valid = false;
                    break;   
                } 
              }
            
            if(valid){
                
                
                for (int i = 0; i < user_name.size(); i++) {
                
                if(user_name.get(i).equals(un)){
                    contains = true;
                    break;
                }
            }
            
            if(contains == false){
            
            try {
            PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(this.myRecords, true)));
            
            out.println(hname.getText() + "/"+ port.getText() + "/" + un + "/" + pass);
             
            out.close();
        } catch (IOException e) {
    }
            }
                
                
            LinkedList<String> subject = new LinkedList<>();
            LinkedList<String> date = new LinkedList<>();
            LinkedList<String> from = new LinkedList<>();
            LinkedList<String> body = new LinkedList<>();
            
            bufferedwriter.write(". select inbox\r\n");
                        
            bufferedwriter.flush();
            
            line = "";
            
            while(!(line = bufferedreader.readLine()).contains("(Success)")){
            
                System.out.println(line);
                
            }
            
            
            bufferedwriter.write(". fetch 1:30 body[header.fields (subject from date)]\r\n");
            
            bufferedwriter.flush();

            line = "";
            
            while(!(line = bufferedreader.readLine()).contains(". OK Success")){
            
                if(line.contains("Subject"))             
                    subject.add(line);
                
                if(line.contains("From"))             
                    from.add(line);
            
                if(line.contains("Date"))             
                    date.add(line);
            }
            
            System.out.println("Subject size is: " + subject.size() + "\n" + "\n" + "\n");

            bufferedwriter.write(". fetch 1:30 body[text]\r\n");
            
            bufferedwriter.flush();
            
            line = "";
            
            String bodyBuilder = "";

            
            while(!(line = bufferedreader.readLine()).contains(". OK Success")){
                
                if(line.contains("FETCH")){
                    
                    if(!bodyBuilder.isEmpty())
                        body.add(bodyBuilder);
           
                    
                    bodyBuilder= "";   
                    continue;
                }
                
                bodyBuilder += line;
                bodyBuilder += "\n";
                            
            }
            
            body.add(bodyBuilder);
                        
            System.out.println("Size is: " + body.size() + "\n" + "\n" + "\n");
            
            for(int i = 0; i< body.size(); i++){
                
                System.out.println(i + "th mail is:" + body.get(i) + "\n"  + "\n" + "\n" );
                
            }
            
            
            MailList ml = new MailList(subject, from, date, body);
            ml.setVisible(true);
            
            }
            
        } catch (IOException ex) {
            Logger.getLogger(LoginScreen.class.getName()).log(Level.SEVERE, null, ex);
        } 
        
        
        
    }//GEN-LAST:event_signinActionPerformed

    private void usersListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usersListActionPerformed


        JComboBox cb = (JComboBox)evt.getSource();
        String uname = (String)cb.getSelectedItem();
        
        int index = (int)cb.getSelectedIndex();
        --index;
        System.out.println(index);

        hname.setText(host_name.get(index));
        port.setText(ports.get(index));
        getUsername.setText(uname);
        getPassword.setText(user_pass.get(index));


    }//GEN-LAST:event_usersListActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LoginScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LoginScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LoginScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LoginScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LoginScreen().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPasswordField getPassword;
    private javax.swing.JTextField getUsername;
    private javax.swing.JTextField hname;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel pass;
    private javax.swing.JTextField port;
    private javax.swing.JButton signin;
    private javax.swing.JLabel user;
    private javax.swing.JComboBox usersList;
    // End of variables declaration//GEN-END:variables
}
